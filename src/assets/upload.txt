上传图片
<el-form-item label="手工艺人头像" :label-width="formLabelWidth" required>
            <el-upload drag
              class="avatar-uploader"
              action="#"
              :show-file-list="false"
              :auto-upload="false"
              :multiple="false"
              :on-change="handleAvatarSuccess"
              :before-upload="beforeAvatarUpload"
              accept="image/jpg"
              v-model="form['images']">
              <img v-if="imageUrl" :src="imageUrl" class="avatar">
              <i v-else class="el-icon-plus avatar-uploader-icon"></i>
            </el-upload> 



  handleAvatarSuccess(item) {
        console.log('handleAvatarSuccess',item,item.raw);
        this.imageUrl = URL.createObjectURL(item.raw);
        this.form.images = item.raw.name.replace(/\.(jpg|jpeg|png)$/, '');
        console.log(this.imageUrl);
        console.log(this.form.images);
      },
      beforeAvatarUpload(file) {
        console.log('beforeAvatarUpload',file,file.raw);
        const isJPG = file.type === 'image/jpeg';
        const isLt2M = file.size / 1024 / 1024 < 2;

        if (!isJPG) {
          this.$message.error('上传头像图片只能是 JPG 格式!');
        }
        if (!isLt2M) {
          this.$message.error('上传头像图片大小不能超过 2MB!');
        }
        return isJPG && isLt2M;
      },



.avatar-uploader .el-upload {
    border: 1px dashed #d9d9d9;
    border-radius: 6px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }
.avatar-uploader .el-upload:hover {
    border-color: #409EFF;
  }
  .avatar-uploader-icon {
    float: center;
    font-size: 28px;
    color: #bfc5ce;
    width: 178px;
    height: 178px;
    line-height: 178px;
    text-align: center;
  }
  .avatar {
    width: 100%;
    height: 100%;
    display: block;
    background-repeat: no-repeat;
  }



上传pdf
<!-- 
          <el-form-item label="上传资格文件" :label-width="formLabelWidth" required>
            <el-upload style="width: 200px; display: inline; margin-left: 25px" class="upload-demo" ref="upload"
              action="#" 
              :show-file-list="true" 
              :before-upload="beforeUploadPDF"
              :on-preview="handlePreview"
              :on-remove="handleRemove"
              :file-list="fileList"
              :on-change="handleChange"
              :on-success="handleSuccess"
              :on-exceed="handleExceed"
              accept="application/pdf;.pdf"
              v-model="form.certificateFilePath">
              <el-button class="selectfile" slot="trigger" type="success" size="small" icon="el-icon-upload2">上传PDF文件</el-button>
              <div slot="tip" class="el-upload__tip">只能上传PDF文件，且不超过1个文件</div>
              <!-- <el-button style="margin-left: 5px;" type="danger" size="small" @click="viewFile" icon="el-icon-view">预览</el-button> -->
            </el-upload>

            <el-dialog :visible.sync="dialogVisible" width="80%">
              <iframe :src="previewUrl" width="100%" height="600px"></iframe>
            </el-dialog>

              <!-- 确定按钮 -->
              <el-button @click="saveFile">确定</el-button>
          </el-form-item> 
        -->



// PDF 上传之前钩子调用
      beforeUploadPDF(file) {
        console.log('beforeUploadPDF',file,file.name);
        const extension = file.name.split('.').slice(-1) == 'pdf';
        if (!extension) {
          this.$message.warning('上传模板只能是pdf格式!');
          return false;
        }
        return extension;
      },
      // 文件列表改变时触发
    handleChange(file, fileList) {
      console.log('handleChange',file,fileList);
      fileList.push(file.raw);
      //this.fileList = fileList;
    },
    // 文件预览
    handlePreview(file) {
      console.log('handlePreview',file,URL.createObjectURL(file.raw));
      this.previewUrl = URL.createObjectURL(file.raw);
      this.dialogVisible = true;
    },
    // 文件移除
    handleRemove() {
      this.fileList = [];
    },
    // 文件超出限制
    handleExceed(files, fileList) {
      this.$message.warning(`当前限制选择 1 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);
    },
    // 文件上传成功
    handleSuccess(file, fileList) {
      // 这里可以根据实际的后端响应来处理
      console.log('handleSuccess',file, fileList);
    },
    // 保存文件到D盘
    saveFile() {
      if (this.fileList.length === 0) {
        this.$message.warning('请先上传文件');
        return;
      }
      const file = this.fileList[0].raw;
      const reader = new FileReader();
      reader.onload = (e) => {
        const data = e.target.result;
        const fs = require('fs');
        const path = require('path');
        const filePath = path.join('D:/file', file.name);
        fs.writeFile(filePath, data, (err) => {
          if (err) {
            this.$message.error('文件保存失败');
            return;
          }
          this.form.file = filePath;
          this.$message.success('文件保存成功');
        });
      };
      reader.readAsArrayBuffer(file);
    },